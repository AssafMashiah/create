/**
 * Shared file between modules so that they can all use the same dependencies and maven repositories.
 **/
group = "org.t2k"
version = "8.18.0-SNAPSHOT"

def groovyVersion = "2.3.2"

// Cobertura plugin for code coverage
def coberturaPluginVersion = "1.2"
project.ext.cobertura =
        "https://github.com/valkolovos/gradle_cobertura/raw/master/repo/gradle_cobertura/gradle_cobertura/$coberturaPluginVersion/coberturainit.gradle"

/**
 * T2K Projects
 */
// Self Content Player
def scpPlayerVersion = "8.16.1-SNAPSHOT"
def playerDlVersion = "8.16.0-SNAPSHOT"
// Common projects
def commonUtilsVersion = "8.16.0-SNAPSHOT"
def commonUpgraderVersion = "8.16.0-SNAPSHOT"
def commonCourseUtilsVersion = "8.16.0-SNAPSHOT"
def t2kConfVersion = "8.16.0-SNAPSHOT"
def commonMongoFactoryVersion = "8.16.0-SNAPSHOT"
def gcrCommonVersion = "7.0.27-SNAPSHOT"

/**
 * External libraries
 */
def jnaVersion = "4.2.2"
def javaxInjectVersion = "1"
def javaxServletVersion = "3.0.1"
def javaxPersistenceApiVersion = "1.0.2"
def javaxActivationVersion = "1.1.1"
def jstlVersion = "1.2"

def aspectjVersion = "1.8.7"

// Spring Framework
def springBootGradlePluginVersion = "1.2.8.RELEASE"
def springFrameworkVersion = "4.2.6.RELEASE"
def springBootVersion = "1.3.5.RELEASE"
def springSecurityVersion = "4.1.0.RELEASE"
def springDataMongoVersion = "1.8.1.RELEASE"
def mongoDBDriverVersion = "2.13.3" //springMongo-1.8.0.RELEASE uses 2.13.0 release: https://github.com/mongodb/mongo-java-driver/releases
ext.tomcatVersion = "7.0.54" // we need ext to access it from backend build.gradle
//def tomcatVersion = "7.0.68" // version added reading ssh key from jar
def snakeYamlForSpringBootVersion = "1.16"
def cglibVersion = "2.2"

def luceneExpressionsVersion = "4.10.4"
def javaMelodyVersion = "1.50.0"

def apacheCommonsIOVersion = "2.4"
def apacheCommonsUploadVersion = "1.2.2"
def apacheCommonsCodecVersion = "1.7"
def apacheCommonsHttpClientVersion = "3.1"
def apacheCommonsCollectionsVersion = "3.2.1"
def apacheCommonsLangVersion = "2.6"
def apacheCommonsBeanUtilsVersion = "1.8.3"
def apacheCommonsEmailVersion = "1.3.1"
def apacheHttpcomponentsVersion = "4.5.1"
//def apacheCommonsCompressVersion = "1.5" // epubcheck and schema validator use commons-compress with different versions. will force commons-compress version

// Logging
def log4jVersion = "1.2.17"
def log4jExtrasVersion = "1.1"
def slf4jVersion = "1.6.4"
def apacheCommonsLoggingVersion = "1.1.1"

// Testing
def testNGVersion = "6.9.10"
def mockitoVersion = "1.8.5"
def xmlUnitVersion = "1.5"

// XML
def dom4jVersion = "1.6.1"
def jaxenVersion = "1.1.4"
def xmlpullVersion = "1.1.3.4d_b4_min"

// JSON
def fasterxmlJacksonVersion = "2.6.2"
def codehausJacksonMapperVersion = "1.9.13"
def gsonVersion = "2.2.4"
def fgeJsonSchemaValidatorVersion = "1.5.2"
def jsonTagLibVersion = "0.4.1"
def jsoupVersion = "1.8.3"
//def jacksonCoreAslVersion = "1.9.13" // epubcheck and schema validator use jackson core asl with different versions. will force jackson core asl version

//def googleGuavaVersion = "13.0.1" // epubcheck and schema validator use guava with different versions. will force guava version

def htmlcleanerVersion = "2.7"
def cssparserVersion = "0.9.13"

//EBooks
def jpdf2htmlVersion = "licensed-08-02-2016"
def jPdfWebVersion = "latest_trial"
def epubLibVersion = "3.1"
def thumbnailatorVersion = "0.4.8"
def jgraphtVersion = "0.7.3"
def pdfBoxVersion = "2.0.0-RC3"
def bouncyCastleVersion = "1.54"
//def epubCheckVersion = "4.0.1"

// Images
def jpegcmykVersion = "1.1.0"

ext {
    groovy = "org.codehaus.groovy:groovy-all:$groovyVersion"

    t2klibraries = [
            scplayer          : "com.t2k.dtp.scplayer:scplayer:$scpPlayerVersion@zip",
            dl                : "com.t2k.player.dl:dl:$playerDlVersion",
            commonUtils       : "com.t2k.common.utils:common-utils:$commonUtilsVersion",
            t2kconfig         : "org.t2k.common:t2kconf:$t2kConfVersion",
            commonUpgrader    : "com.t2k.common.dbupgrader:dbupgrader:$commonUpgraderVersion",
            gcrCommonModel    : "org.t2k.gcr.common:gcr-common-model:$gcrCommonVersion",
            gcrCommonClient   : "org.t2k.gcr.common:gcr-common-client:$gcrCommonVersion",
            commonMongoFactory: "org.t2k.common:t2k-mongo-factory:$commonMongoFactoryVersion",
            commonCourseutils : "com.t2k.common.courseutils:courseutils:$commonCourseUtilsVersion"
    ]

    javax = [
            inject        : "javax.inject:javax.inject:$javaxInjectVersion",
            persistenceApi: "javax.persistence:persistence-api:$javaxPersistenceApiVersion",
            servlet       : "javax.servlet:javax.servlet-api:$javaxServletVersion",
            jstlServlet   : "javax.servlet:jstl:$jstlVersion",
            activation    : "javax.activation:activation:$javaxActivationVersion"
    ]

    aspectj = [
            tools : "org.aspectj:aspectjtools:$aspectjVersion",
            rt    : "org.aspectj:aspectjrt:$aspectjVersion",
            weaver: "org.aspectj:aspectjweaver:$aspectjVersion"
    ]

    spring = [
            "org.springframework:spring-core:$springFrameworkVersion",
            "org.springframework:spring-beans:$springFrameworkVersion",
            "org.springframework:spring-context:$springFrameworkVersion",
            "org.springframework:spring-context-support:$springFrameworkVersion",
            "org.springframework:spring-jdbc:$springFrameworkVersion",
            "org.springframework:spring-orm:$springFrameworkVersion",
            "org.springframework:spring-aop:$springFrameworkVersion",
            "org.springframework:spring-aspects:$springFrameworkVersion",
            "org.springframework:spring-expression:$springFrameworkVersion",
            "org.springframework:spring-web:$springFrameworkVersion",
            "org.springframework:spring-websocket:$springFrameworkVersion",
            "org.springframework:spring-tx:$springFrameworkVersion",
            "org.springframework.data:spring-data-mongodb:$springDataMongoVersion",
    ]

    springWebMvc = "org.springframework:spring-webmvc:$springFrameworkVersion"

    springSecurity = [
            core     : "org.springframework.security:spring-security-core:$springSecurityVersion",
            config   : "org.springframework.security:spring-security-config:$springSecurityVersion",
            web      : "org.springframework.security:spring-security-web:$springSecurityVersion",
            ldap     : "org.springframework.security:spring-security-ldap:$springSecurityVersion",
            messaging: "org.springframework.security:spring-security-messaging:$springSecurityVersion",
    ]

    springBoot = [
            gradlePlugin : "org.springframework.boot:spring-boot-gradle-plugin:$springBootGradlePluginVersion",
            starterWeb   : "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
            elasticSearch: "org.springframework.boot:spring-boot-starter-data-elasticsearch:$springBootVersion"
    ]
    snakeYamlForSpringBoot = "org.yaml:snakeyaml:$snakeYamlForSpringBootVersion"

    apacheLuceneExpressions = "org.apache.lucene:lucene-expressions:$luceneExpressionsVersion"

    apacheEmbeddedTomcat = "org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion"
    javaMelody = "net.bull.javamelody:javamelody-core:$javaMelodyVersion"

    database = [
            mongodb: "org.mongodb:mongo-java-driver:$mongoDBDriverVersion"
    ]

    apacheCommons = [
            io         : "commons-io:commons-io:$apacheCommonsIOVersion",
            fileupload : "commons-fileupload:commons-fileupload:$apacheCommonsUploadVersion",
            codec      : "commons-codec:commons-codec:$apacheCommonsCodecVersion",
            logging    : "commons-logging:commons-logging:$apacheCommonsLoggingVersion",
            httpclient : "commons-httpclient:commons-httpclient:$apacheCommonsHttpClientVersion",
            collections: "commons-collections:commons-collections:$apacheCommonsCollectionsVersion",
            lang       : "commons-lang:commons-lang:$apacheCommonsLangVersion",
            email      : "org.apache.commons:commons-email:$apacheCommonsEmailVersion",
            beanutils  : "commons-beanutils:commons-beanutils:$apacheCommonsBeanUtilsVersion"
    ]

    xml = [
            jsoup: "org.jsoup:jsoup:$jsoupVersion",
            dom4j: "dom4j:dom4j:$dom4jVersion",
            jaxen: "jaxen:jaxen:$jaxenVersion",
            pull : "xmlpull:xmlpull:$xmlpullVersion",
    ]

    html = [
            apacheHttpComponentsClient  : "org.apache.httpcomponents:httpclient:$apacheHttpcomponentsVersion",
            apacheHttpComponentsHttpMime: "org.apache.httpcomponents:httpmime:$apacheHttpcomponentsVersion",
            htmlcleaner                 : "net.sourceforge.htmlcleaner:htmlcleaner:$htmlcleanerVersion",
            cssparser                   : "net.sourceforge.cssparser:cssparser:$cssparserVersion",
    ]

    json = [
            gjson               : "com.google.code.gson:gson:$gsonVersion",
            jsonTagLib          : "json-taglib:json-taglib:$jsonTagLibVersion",
            jacksonMapper       : "org.codehaus.jackson:jackson-mapper-asl:$codehausJacksonMapperVersion",
            jsonValidator       : "org.kitchen-eel:json-schema-validator:$fgeJsonSchemaValidatorVersion",
            fasterxmlCore       : "com.fasterxml.jackson.core:jackson-core:$fasterxmlJacksonVersion",
            fasterxmlDatabind   : "com.fasterxml.jackson.core:jackson-databind:$fasterxmlJacksonVersion",
            fasterxmlAnnotations: "com.fasterxml.jackson.core:jackson-annotations:$fasterxmlJacksonVersion",
    ]

    ebooks = [
            pdfBox   : "org.apache.pdfbox:pdfbox:$pdfBoxVersion",
            jpdf2html: "idr:jpdf2html:$jpdf2htmlVersion",
            jPdfWeb  : "qoppa:jpdfweb:$jPdfWebVersion",
            epubLib  : "nl.siegmann.epublib:epublib-core:$epubLibVersion",
//            epubcheck: "org.idpf:epubcheck:$epubCheckVersion" // http://mvnrepository.com/artifact/org.idpf/epubcheck
    ]

    loggers = [
            log4j      : "log4j:log4j:$log4jVersion",
            log4jExtras: "log4j:apache-log4j-extras:$log4jExtrasVersion",
            slf4jApi   : "org.slf4j:slf4j-api:$slf4jVersion",
            slf4jJcl   : "org.slf4j:jcl-over-slf4j:$slf4jVersion",
    ]


    libraries = [
            // needed to get around elasticsearch stacktrace about jna not found https://github.com/elastic/elasticsearch/issues/13245
            jna          : "net.java.dev.jna:jna:$jnaVersion",
            jstl         : "jstl:jstl:$jstlVersion",
            cglib        : "cglib:cglib:$cglibVersion",    //spring security is using this lib
            jgrapht      : "jgrapht:jgrapht:$jgraphtVersion",
            bouncyCastle : "org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion", // required for pdfBox package
//            monocle          : "org.jfxtras:openjfx-monocle:1.8.0_20",
            thumbnailator: "net.coobird:thumbnailator:$thumbnailatorVersion",
            jpegcmyk     : "fr.sertelon.media:jpeg-cmyk:$jpegcmykVersion",
    ]

    testing = [
            testNG    : "org.testng:testng:$testNGVersion",
            mockito   : "org.mockito:mockito-all:$mockitoVersion",
            springTest: "org.springframework:spring-test:$springFrameworkVersion",
            xmlUnit   : "xmlunit:xmlunit:$xmlUnitVersion",
    ]
}
