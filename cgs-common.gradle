/**
 * Shared file between modules so that they can all use the same dependencies and maven repositories.
 **/
group = "org.t2k"
version = "8.16.0-SNAPSHOT" //fixme move to gradle.properties

def groovyVersion = "2.3.2"

// Cobertura plugin for code coverage
def coberturaPluginVersion = "1.2"
project.ext.cobertura =
        "https://github.com/valkolovos/gradle_cobertura/raw/master/repo/gradle_cobertura/gradle_cobertura/$coberturaPluginVersion/coberturainit.gradle"

/**
 * T2K Projects
 */
// Self Content Player
def scpPlayerVersion = "8.16.0-SNAPSHOT"
// Common projects
def commonUtilsVersion = "8.16.0-SNAPSHOT"
def commonUpgraderVersion = "8.16.0-SNAPSHOT"
def commonCourseUtilsVersion = "8.16.0-SNAPSHOT"
def t2kConfVersion = "8.16.0-SNAPSHOT"
def commonMongoFactoryVersion = "8.16.0-SNAPSHOT"
def gcrCommonVersion = "7.0.27-SNAPSHOT"

/**
 * External libraries
 */
def jnaVersion = "4.2.2"
def javaxInjectVersion = "1"
def javaxServletVersion = "3.0.1"
def javaxJstlVersion = "1.2"
def javaxPersistenceApiVersion = "1.0.2"
def jettyVersion = "8.1.7.v20120910" // required for servlet3.0 support
def javaxActivationVersion = "1.1.1"

def aspectjVersion = "1.8.7"

// Spring Framework
def springFrameworkVersion = "4.2.6.RELEASE"
def springBootVersion = "1.3.5.RELEASE"
def springSecurityVersion = "4.1.0.RELEASE"
def springDataMongoVersion = "1.8.1.RELEASE"
def mongoDBDriverVersion = "2.13.3" //springMongo-1.8.0.RELEASE uses 2.13.0 release: https://github.com/mongodb/mongo-java-driver/releases
def tomcatVersion = "7.0.54"
//def tomcatVersion = "7.0.68" // version added reading ssh key from jar
def snakeYamlForSpringBoot = "1.16"
def cglibVersion = "2.2"

def luceneExpressionsVersion = "4.10.4"
def javaMelodyVersion = "1.50.0"

def apacheCommonsIOVersion = "2.4"
def apacheCommonsUploadVersion = "1.2.2"
def apacheCommonsCodecVersion = "1.7"
def apacheCommonsHttpClientVersion = "3.1"
def apacheCommonsCollectionsVersion = "3.2.1"
def apacheCommonsLangVersion = "2.6"
def apacheCommonsBeanUtilsVersion = "1.8.3"
def apacheCommonsEmailVersion = "1.3.1"
def apacheHttpcomponentsVersion = "4.5.1"
//def apacheCommonsCompressVersion = "1.5" // epubcheck and schema validator use commons-compress with different versions. will force commons-compress version

// Logging
def log4jVersion = "1.2.17"
def log4jExtrasVersion = "1.1"
def slf4jVersion = "1.6.4"
def apacheCommonsLoggingVersion = "1.1.1"

// Testing
def testNGVersion = "6.9.10"
def mockitoVersion = "1.8.5"
def xmlUnitVersion = "1.5"

// XML
def dom4jVersion = "1.6.1"
def jaxenVersion = "1.1.4"
def xmlpullVersion = "1.1.3.4d_b4_min"

// JSON
def fasterxmlJacksonVersion = "2.6.2"
def codehausJacksonMapperVersion = "1.9.13"
def gsonVersion = "2.2.4"
def fgeJsonSchemaValidatorVersion = "1.5.2"
def jsonTagLibVersion = "0.4.1"
def jsoupVersion = "1.8.3"
//def jacksonCoreAslVersion = "1.9.13" // epubcheck and schema validator use jackson core asl with different versions. will force jackson core asl version

//def googleGuavaVersion = "13.0.1" // epubcheck and schema validator use guava with different versions. will force guava version

def htmlcleanerVersion = "2.7"
def cssparserVersion = "0.9.13"

//EBooks
def jpdf2htmlVersion = "licensed-08-02-2016"
def jPdfWebVersion = "latest_trial"
def epubLibVersion = "3.1"
def thumbnailatorVersion = "0.4.8"
def jgraphtVersion = "0.7.3"
def pdfBoxVersion = "2.0.0-RC3"
def bouncyCastleVersion = "1.54"
//def epubCheckVersion = "4.0.1"

// Images
def jpegcmykVersion = "1.1.0"

ext {
    player = [
//		dl: "com.t2k.player.dl:dl:$playerDlVersion
    ]

    scplayer = [
            scplayer: "com.t2k.dtp.scplayer:scplayer:$scpPlayerVersion@zip"
    ]

    t2klibraries = [
            commonUtils       : "com.t2k.common.utils:common-utils:$commonUtilsVersion",
            t2kconfig         : "org.t2k.common:t2kconf:$t2kConfVersion",
            commonUpgrader    : "com.t2k.common.dbupgrader:dbupgrader:$commonUpgraderVersion",
            gcrCommonModel    : "org.t2k.gcr.common:gcr-common-model:$gcrCommonVersion",
            gcrCommonClient   : dependencies.create("org.t2k.gcr.common:gcr-common-client:$gcrCommonVersion") {
                exclude group: "org.springframework"
            },
            commonMongoFactory: dependencies.create("org.t2k.common:t2k-mongo-factory:$commonMongoFactoryVersion") {
                exclude group: "org.springframework"
            },
            commonCourseutils : "com.t2k.common.courseutils:courseutils:$commonCourseUtilsVersion"
    ]

    libraries = [
            javaxInject      : "javax.inject:javax.inject:$javaxInjectVersion",
            cssparser        : "net.sourceforge.cssparser:cssparser:$cssparserVersion",
            log4j            : "log4j:log4j:$log4jVersion",
            log4jExtras      : "log4j:apache-log4j-extras:$log4jExtrasVersion",
            jsonTagLib       : "json-taglib:json-taglib:$jsonTagLibVersion",
            jacksonMapper    : "org.codehaus.jackson:jackson-mapper-asl:$codehausJacksonMapperVersion",
            jsonValidator    : "org.kitchen-eel:json-schema-validator:$fgeJsonSchemaValidatorVersion",
            http             : "org.apache.httpcomponents:httpclient:$apacheHttpcomponentsVersion",
            httpMime         : "org.apache.httpcomponents:httpmime:$apacheHttpcomponentsVersion",
            javaMelody       : "net.bull.javamelody:javamelody-core:$javaMelodyVersion",
            gjson            : "com.google.code.gson:gson:$gsonVersion",
            jgrapht          : "jgrapht:jgrapht:$jgraphtVersion",
            xmlUnit          : "xmlunit:xmlunit:$xmlUnitVersion",
            jpdf2html        : "idr:jpdf2html:$jpdf2htmlVersion",
            jPdfWeb          : "qoppa:jpdfweb:$jPdfWebVersion",
            epubLib          : "nl.siegmann.epublib:epublib-core:$epubLibVersion",
//            monocle          : "org.jfxtras:openjfx-monocle:1.8.0_20",
            thumbnailator    : "net.coobird:thumbnailator:$thumbnailatorVersion",
            jpegcmyk         : "fr.sertelon.media:jpeg-cmyk:$jpegcmykVersion",
            pdfBox           : "org.apache.pdfbox:pdfbox:$pdfBoxVersion",
            bouncyCastle     : "org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion", // required for pdfBox package
            jsoup            : "org.jsoup:jsoup:$jsoupVersion",
            // needed to get around elasticsearch stacktrace about jna not found
            // https://github.com/elastic/elasticsearch/issues/13245
            jna              : "net.java.dev.jna:jna:$jnaVersion",
            groovy           : "org.codehaus.groovy:groovy-all:$groovyVersion",
            luceneExpressions: "org.apache.lucene:lucene-expressions:$luceneExpressionsVersion"
//            epubcheck : "org.idpf:epubcheck:$epubCheckVersion // http://mvnrepository.com/artifact/org.idpf/epubcheck
    ]

    aspectj = [
            tools : "org.aspectj:aspectjtools:$aspectjVersion",
            rt    : "org.aspectj:aspectjrt:$aspectjVersion",
            weaver: "org.aspectj:aspectjweaver:$aspectjVersion"
    ]

    spring = [
            "org.springframework:spring-core:$springFrameworkVersion",
            "org.springframework:spring-beans:$springFrameworkVersion",
            "org.springframework:spring-context:$springFrameworkVersion",
            "org.springframework:spring-context-support:$springFrameworkVersion",
            "org.springframework:spring-jdbc:$springFrameworkVersion",
            "org.springframework:spring-orm:$springFrameworkVersion",
            "org.springframework:spring-aop:$springFrameworkVersion",
            "org.springframework:spring-aspects:$springFrameworkVersion",
            "org.springframework:spring-expression:$springFrameworkVersion",
            "org.springframework:spring-web:$springFrameworkVersion",
            "org.springframework:spring-websocket:$springFrameworkVersion",
            "org.springframework:spring-tx:$springFrameworkVersion",
            "org.springframework.data:spring-data-mongodb:$springDataMongoVersion",
            "javax.persistence:persistence-api:$javaxPersistenceApiVersion"
    ]

    springBoot = [
            gradlePlugin : dependencies.create("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"),
            starterWeb   : dependencies.create("org.springframework.boot:spring-boot-starter-web:$springBootVersion") {
                exclude module: "spring-boot-starter-logging"
//                exclude module: "com.google.guava:guava"
//                exclude module: "spring-boot-starter-tomcat" //causes version conflict when deploying war to tomcat - may not war with spring boot Application start
            },
            tomcatJSP    : dependencies.create("org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion"), //fixme change to provided
            jstlServlet  : dependencies.create("javax.servlet:jstl:$javaxJstlVersion"),
            elasticSearch: dependencies.create("org.springframework.boot:spring-boot-starter-data-elasticsearch:$springBootVersion") {
                exclude module: "spring-data-commons"
                exclude module: "joda-time"
                exclude module: "spring-boot-starter-logging"
//                exclude group: "org.slf4j"
            },
    ]

    web = [
            mvc: dependencies.create("org.springframework:spring-webmvc:$springFrameworkVersion") {
                exclude group: "org.springframework", module: "spring-asm"
                force = true
            }
    ]

    xml = [
            dom4j: "dom4j:dom4j:$dom4jVersion",
            jaxen: "jaxen:jaxen:$jaxenVersion",
            pull : "xmlpull:xmlpull:$xmlpullVersion"
    ]

    security = [
            "org.springframework.security:spring-security-core:$springSecurityVersion",
            "org.springframework.security:spring-security-config:$springSecurityVersion",
            "org.springframework.security:spring-security-web:$springSecurityVersion",
            "org.springframework.security:spring-security-ldap:$springSecurityVersion",
            "org.springframework.security:spring-security-messaging:$springSecurityVersion",
            "jstl:jstl:$javaxJstlVersion",
            "cglib:cglib:$cglibVersion"    //spring security is using this lib
    ]

    testing = [
            "org.testng:testng:$testNGVersion",
            "org.springframework:spring-test:$springFrameworkVersion",
            "org.mockito:mockito-all:$mockitoVersion"
    ]

    jetty = [
            "org.mortbay.jetty:jetty:$jettyVersion",
            "org.mortbay.jetty:jetty-util:$jettyVersion"
    ]

    servlet = [
            "javax.servlet:javax.servlet-api:$javaxServletVersion"
    ]

    database = [
            mongodb: "org.mongodb:mongo-java-driver:$mongoDBDriverVersion"
    ]

    apacheCommons = [
            "commons-fileupload:commons-fileupload:$apacheCommonsUploadVersion",
            "commons-codec:commons-codec:$apacheCommonsCodecVersion",
            "commons-httpclient:commons-httpclient:$apacheCommonsHttpClientVersion",
            "commons-collections:commons-collections:$apacheCommonsCollectionsVersion",
            "commons-lang:commons-lang:$apacheCommonsLangVersion",
            "org.apache.commons:commons-email:$apacheCommonsEmailVersion",
            "commons-beanutils:commons-beanutils:$apacheCommonsBeanUtilsVersion"
    ]

    html = [
            "org.jsoup:jsoup:$jsoupVersion",
            "net.sourceforge.htmlcleaner:htmlcleaner:$htmlcleanerVersion"
    ]
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 3, 'minutes'

        // fail eagerly on version conflict (includes transitive dependencies)
        // e.g. multiple different versions of the same dependency (group and name are equal)
        failOnVersionConflict()

        eachDependency {
            if (it.requested.group == "org.apache.tomcat.embed") {
                it.useVersion tomcatVersion
            }
        }

        exclude group: "ch.qos.logback"

        force "log4j:log4j:$log4jVersion"

//        force "com.google.guava:guava:$googleGuavaVersion
//        force "org.codehaus.jackson:jackson-core-asl:$jacksonCoreAslVersion
//        force "org.apache.commons:commons-compress:$apacheCommonsCompressVersion

        force "org.eclipse.jetty:jetty-server:$jettyVersion"
        force "org.eclipse.jetty:jetty-webapp:$jettyVersion"
        force "org.eclipse.jetty:jetty-servlet:$jettyVersion"
        force "org.eclipse.jetty:jetty-util:$jettyVersion"
        force "org.eclipse.jetty:jetty-client:$jettyVersion"
        force "org.eclipse.jetty:jetty-servlets:$jettyVersion"
        force "org.eclipse.jetty:jetty-http:$jettyVersion"
        force "org.eclipse.jetty:jetty-io:$jettyVersion"
        force "org.eclipse.jetty:jetty-continuation:$jettyVersion"

        force "org.springframework:spring-tx:$springFrameworkVersion"
        force "org.springframework:spring-core:$springFrameworkVersion"
        force "org.springframework:spring-beans:$springFrameworkVersion"
        force "org.springframework:spring-context:$springFrameworkVersion"
        force "org.springframework:spring-context-support:$springFrameworkVersion"
        force "org.springframework:spring-jdbc:$springFrameworkVersion"
        force "org.springframework:spring-orm:$springFrameworkVersion"
        force "org.springframework:spring-aop:$springFrameworkVersion"
        force "org.springframework:spring-aspects:$springFrameworkVersion"
        force "org.springframework:spring-web:$springFrameworkVersion"
        force "org.springframework:spring-expression:$springFrameworkVersion"
        force "org.springframework.data:spring-data-mongodb:$springDataMongoVersion"
        force "org.yaml:snakeyaml:$snakeYamlForSpringBoot"

        force "com.t2k.common.utils:common-utils:$commonUtilsVersion"
        force "org.slf4j:slf4j-api:$slf4jVersion"
        force "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        force "javax.activation:activation:$javaxActivationVersion"
        force "commons-logging:commons-logging:$apacheCommonsLoggingVersion"
        force "commons-codec:commons-codec:$apacheCommonsCodecVersion"
        force "commons-lang:commons-lang:$apacheCommonsLangVersion"
        force "commons-io:commons-io:$apacheCommonsIOVersion"
        force "commons-beanutils:commons-beanutils:$apacheCommonsBeanUtilsVersion"

        // surprisingly required by com.fasterxml.jackson.core:jackson-databind"
        force "com.fasterxml.jackson.core:jackson-databind:$fasterxmlJacksonVersion"
        force "com.fasterxml.jackson.core:jackson-core:$fasterxmlJacksonVersion"
        force "com.fasterxml.jackson.core:jackson-annotations:$fasterxmlJacksonVersion"
        force "org.codehaus.jackson:jackson-mapper-asl:$codehausJacksonMapperVersion"
        // required for Spring 4:"
        force "org.aspectj:aspectjrt:$aspectjVersion"
        force "org.aspectj:aspectjweaver:$aspectjVersion"

        // see comment on mongoDBDriverVersion"
        force "org.mongodb:mongo-java-driver:$mongoDBDriverVersion"
    }
}
