apply plugin: 'idea'

version = '8.16.0-SNAPSHOT'

// define Cobertura plugin
def coberturaPluginVersion = '1.2'
project.ext.cobertura = 'https://github.com/valkolovos/gradle_cobertura/raw/master/repo/gradle_cobertura/gradle_cobertura/' + coberturaPluginVersion + '/coberturainit.gradle'

// T2K projects
// Self Content Player
def scpPlayerVersion = '8.16.0-SNAPSHOT'
// Common projects
def commonUtilsVersion = '8.16.0-SNAPSHOT'
def commonUpgraderVersion = '8.16.0-SNAPSHOT'
def commonCourseutilsVersion = '8.16.0-SNAPSHOT'
def t2kConfVersion = '8.16.0-SNAPSHOT'
def commonMongoFactoryVersion = '8.16.0-SNAPSHOT'

def gcrCommonVersion = '7.0.27-SNAPSHOT'

def javaxInjectVersion = '1'
def springVersion = '4.2.6.RELEASE'
def springBootVersion = '1.3.5.RELEASE'
def tomcatVersion = '7.0.54'
//def tomcatVersion = '7.0.68' // version added reading ssh key from jar
def snakeYamlForSpringBoot = '1.16'
def springSecurityVersion = '4.1.0.RELEASE'

def jnaVersion = '4.2.2'
def groovyVersion = '2.3.2'
def luceneExpressionsVersion = '4.10.4'

def log4jVersion = '1.2.17'
def log4jExtrasVersion = '1.1'
def testngVersion = '6.9.10'
def servletVersion = '3.0.1'
def jettyVersion = '8.1.7.v20120910' // required for servlet3.0 support
def aspectjVersion = '1.8.7'
def mockitoVersion = '1.8.5'
def cglibVersion = '2.2'
def jstlVersion = '1.2'
def jsonTagLibVersion = '0.4.1'

def springMongoVersion = '1.8.1.RELEASE'
def mongoDBDriverVersion = '2.13.3' //springMongo-1.8.0.RELEASE uses 2.13.0 release: https://github.com/mongodb/mongo-java-driver/releases

def jacksonVersion = '2.6.2'
def jacksonMapperVersion = '1.9.13'

def fgeJsonSchemaValidatorVersion = '1.5.2'
//def epubCheckVersion = '4.0.1'
//def googleGuavaVersion = '13.0.1' // epubcheck and schema validator use guava with different versions. will force guava version
//def jacksonCoreAslVersion = '1.9.13' // epubcheck and schema validator use jackson core asl with different versions. will force jackson core asl version
//def apacheCommonsCompressVersion = '1.5' // epubcheck and schema validator use commons-compress with different versions. will force commons-compress version

def persistenceApiVersion = '1.0.2'

def commonsUploadVersion = '1.2.2'
def commonsCodecVersion = '1.7'
def commonsHttpClientVersion = '3.1'
def commonsCollectionsVersion = '3.2.1'
def commonsLangVersion = '2.6'
def commonsBeanUtilsVersion = '1.8.3'
def commonsEmailVersion = '1.3.1'

def httpcomponentsVersion = '4.5.1'
def dom4jVersion = '1.6.1'
def jaxenVersion = '1.1.4'
def jsoupVersion = '1.8.3'
def htmlcleanerVersion = '2.7'
def cssparserVersion = '0.9.13'
def jpdf2htmlVersion = 'licensed-08-02-2016'
def jPdfWebVersion = 'latest_trial'


ext {
    player = [
//		dl: 'com.t2k.player.dl:dl:' + playerDlVersion
    ]

    scplayer = [
            scplayer: 'com.t2k.dtp.scplayer:scplayer:' + scpPlayerVersion + "@zip"
    ]

    t2klibraries = [
            commonUtils       : 'com.t2k.common.utils:common-utils:' + commonUtilsVersion,
            t2kconfig         : 'org.t2k.common:t2kconf:' + t2kConfVersion,
            commonUpgrader    : 'com.t2k.common.dbupgrader:dbupgrader:' + commonUpgraderVersion,
            gcrCommonModel    : 'org.t2k.gcr.common:gcr-common-model:' + gcrCommonVersion,
            gcrCommonClient   : 'org.t2k.gcr.common:gcr-common-client:' + gcrCommonVersion,
            gcrCommonClient   : dependencies.create('org.t2k.gcr.common:gcr-common-client:' + gcrCommonVersion) {
                exclude group: 'org.springframework'
            },
            commonMongoFactory: dependencies.create('org.t2k.common:t2k-mongo-factory:' + commonMongoFactoryVersion) {
                exclude group: 'org.springframework'
            },
            commonCourseutils : 'com.t2k.common.courseutils:courseutils:' + commonCourseutilsVersion
    ]

    libraries = [
            javaxInject      : 'javax.inject:javax.inject:' + javaxInjectVersion,
            cssparser        : 'net.sourceforge.cssparser:cssparser:' + cssparserVersion,
            log4j            : 'log4j:log4j:' + log4jVersion,
            log4jExtras      : 'log4j:apache-log4j-extras:' + log4jExtrasVersion,
            jsonTagLib       : 'json-taglib:json-taglib:' + jsonTagLibVersion,
            jacksonMapper    : 'org.codehaus.jackson:jackson-mapper-asl:' + jacksonMapperVersion,
            jsonValidator    : 'org.kitchen-eel:json-schema-validator:' + fgeJsonSchemaValidatorVersion,
            http             : 'org.apache.httpcomponents:httpclient:' + httpcomponentsVersion,
            httpMime         : 'org.apache.httpcomponents:httpmime:' + httpcomponentsVersion,
            javaMelody       : 'net.bull.javamelody:javamelody-core:1.50.0',
            gjson            : 'com.google.code.gson:gson:2.2.+',
            jgrapht          : 'jgrapht:jgrapht:0.7.3',
            xmlUnit          : 'xmlunit:xmlunit:1.5',
            jpdf2html        : 'idr:jpdf2html:' + jpdf2htmlVersion,
            jPdfWeb          : 'qoppa:jpdfweb:' + jPdfWebVersion,
            epubLib          : 'nl.siegmann.epublib:epublib-core:3.1',
            monocle          : 'org.jfxtras:openjfx-monocle:1.8.0_20',
            thumbnailator    : 'net.coobird:thumbnailator:0.4.8',
            jpegcmyk         : 'fr.sertelon.media:jpeg-cmyk:1.1.0',
            pdfBox           : 'org.apache.pdfbox:pdfbox:2.0.0-RC3',
            bouncyCastle     : 'org.bouncycastle:bcprov-jdk15on:1.54', // required for pdfBox package
            jsoup            : 'org.jsoup:jsoup:1.8.3',
            // needed to get around elasticsearch stacktrace about jna not found
            // https://github.com/elastic/elasticsearch/issues/13245
            jna              : 'net.java.dev.jna:jna:' + jnaVersion,
            groovy           : 'org.codehaus.groovy:groovy-all:' + groovyVersion,
            luceneExpressions: 'org.apache.lucene:lucene-expressions:' + luceneExpressionsVersion
//            epubcheck : 'org.idpf:epubcheck:' + epubCheckVersion // http://mvnrepository.com/artifact/org.idpf/epubcheck
    ]

    aspectj = [
            tools : 'org.aspectj:aspectjtools:' + aspectjVersion,
            rt    : 'org.aspectj:aspectjrt:' + aspectjVersion,
            weaver: 'org.aspectj:aspectjweaver:' + aspectjVersion
    ]

    spring = [
            'org.springframework:spring-core:' + springVersion,
            'org.springframework:spring-beans:' + springVersion,
            'org.springframework:spring-context:' + springVersion,
            'org.springframework:spring-context-support:' + springVersion,
            'org.springframework:spring-jdbc:' + springVersion,
            'org.springframework:spring-orm:' + springVersion,
            'org.springframework:spring-aop:' + springVersion,
            'org.springframework:spring-aspects:' + springVersion,
            'org.springframework:spring-expression:' + springVersion,
            'org.springframework:spring-web:' + springVersion,
            'org.springframework:spring-websocket:' + springVersion,
            'org.springframework:spring-tx:' + springVersion,
            'org.springframework.data:spring-data-mongodb:' + springMongoVersion,
            'javax.persistence:persistence-api:' + persistenceApiVersion
    ]

    springBoot = [
            gradlePlugin : dependencies.create('org.springframework.boot:spring-boot-gradle-plugin:' + springBootVersion),
            starterWeb   : dependencies.create('org.springframework.boot:spring-boot-starter-web:' + springBootVersion) {
                exclude module: 'spring-boot-starter-logging'
//                exclude module: 'com.google.guava:guava'
//                exclude module: 'spring-boot-starter-tomcat' //causes version conflict when deploying war to tomcat - may not war with spring boot Application start
            },
            tomcatJSP    : dependencies.create('org.apache.tomcat.embed:tomcat-embed-jasper:' + tomcatVersion), //fixme change to provided
            jstlServlet  : dependencies.create('javax.servlet:jstl:' + jstlVersion),
            elasticSearch: dependencies.create('org.springframework.boot:spring-boot-starter-data-elasticsearch:' + springBootVersion) {
                exclude module: 'spring-data-commons'
                exclude module: 'joda-time'
                exclude module: 'spring-boot-starter-logging'
//                exclude group: 'org.slf4j'
            },
    ]

    web = [
            mvc: dependencies.create('org.springframework:spring-webmvc:' + springVersion) {
                exclude group: 'org.springframework', module: 'spring-asm'
                force = true
            }
    ]

    xml = [
            dom4j: 'dom4j:dom4j:' + dom4jVersion,
            jaxen: 'jaxen:jaxen:' + jaxenVersion,
            pull : 'xmlpull:xmlpull:1.1.3.4d_b4_min'
    ]

    security = [
            'org.springframework.security:spring-security-core:' + springSecurityVersion,
            'org.springframework.security:spring-security-config:' + springSecurityVersion,
            'org.springframework.security:spring-security-web:' + springSecurityVersion,
            'org.springframework.security:spring-security-ldap:' + springSecurityVersion,
            'org.springframework.security:spring-security-messaging:' + springSecurityVersion,
            'jstl:jstl:' + jstlVersion,
            'cglib:cglib:' + cglibVersion    //spring security is using this lib
    ]

    testing = [
            'org.testng:testng:' + testngVersion,
            'org.springframework:spring-test:' + springVersion,
            'org.mockito:mockito-all:' + mockitoVersion
    ]

    jetty = [
            'org.mortbay.jetty:jetty:' + jettyVersion,
            'org.mortbay.jetty:jetty-util:' + jettyVersion
    ]

    servlet = [
            'javax.servlet:javax.servlet-api:' + servletVersion
    ]

    database = [
            mongodb: 'org.mongodb:' + 'mongo-java-driver:' + mongoDBDriverVersion
    ]

    apacheCommons = [
            'commons-fileupload:commons-fileupload:' + commonsUploadVersion,
            'commons-codec:commons-codec:' + commonsCodecVersion,
            'commons-httpclient:commons-httpclient:' + commonsHttpClientVersion,
            'commons-collections:commons-collections:' + commonsCollectionsVersion,
            'commons-lang:commons-lang:' + commonsLangVersion,
            'org.apache.commons:commons-email:' + commonsEmailVersion,
            'commons-beanutils:commons-beanutils:' + commonsBeanUtilsVersion
    ]

    html = [
            "org.jsoup:jsoup:" + jsoupVersion,
            "net.sourceforge.htmlcleaner:htmlcleaner:" + htmlcleanerVersion
    ]
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 3, 'minutes'

        // fail eagerly on version conflict (includes transitive dependencies)
        // e.g. multiple different versions of the same dependency (group and name are equal)
        failOnVersionConflict()

        eachDependency {
            if (it.requested.group == 'org.apache.tomcat.embed') {
                it.useVersion tomcatVersion
            }
        }

        exclude group: 'ch.qos.logback'

        force 'log4j:log4j:' + log4jVersion

//        force 'com.google.guava:guava:' + googleGuavaVersion
//        force 'org.codehaus.jackson:jackson-core-asl:' + jacksonCoreAslVersion
//        force 'org.apache.commons:commons-compress:' + apacheCommonsCompressVersion

        force 'org.eclipse.jetty:jetty-server:' + jettyVersion
        force 'org.eclipse.jetty:jetty-webapp:' + jettyVersion
        force 'org.eclipse.jetty:jetty-servlet:' + jettyVersion
        force 'org.eclipse.jetty:jetty-util:' + jettyVersion
        force 'org.eclipse.jetty:jetty-client:' + jettyVersion
        force 'org.eclipse.jetty:jetty-servlets:' + jettyVersion
        force 'org.eclipse.jetty:jetty-http:' + jettyVersion
        force 'org.eclipse.jetty:jetty-io:' + jettyVersion
        force 'org.eclipse.jetty:jetty-continuation:' + jettyVersion

        force 'org.springframework:spring-tx:' + springVersion
        force 'org.springframework:spring-core:' + springVersion
        force 'org.springframework:spring-beans:' + springVersion
        force 'org.springframework:spring-context:' + springVersion
        force 'org.springframework:spring-context-support:' + springVersion
        force 'org.springframework:spring-jdbc:' + springVersion
        force 'org.springframework:spring-orm:' + springVersion
        force 'org.springframework:spring-aop:' + springVersion
        force 'org.springframework:spring-aspects:' + springVersion
        force 'org.springframework:spring-web:' + springVersion
        force 'org.springframework:spring-expression:' + springVersion
        force 'org.springframework.data:spring-data-mongodb:' + springMongoVersion
        force 'org.yaml:snakeyaml:' + snakeYamlForSpringBoot

        force 'com.t2k.common.utils:common-utils:' + commonUtilsVersion
        force 'org.slf4j:slf4j-api:1.6.4'
        force 'org.slf4j:jcl-over-slf4j:1.6.4'
        force 'javax.activation:activation:1.1.1'
        force 'commons-logging:commons-logging:1.1.1'
        force 'commons-codec:commons-codec:' + commonsCodecVersion
        force 'commons-lang:commons-lang:' + commonsLangVersion
        force 'commons-io:commons-io:2.4'
        force 'commons-beanutils:commons-beanutils:' + commonsBeanUtilsVersion

        // surprisingly required by com.fasterxml.jackson.core:jackson-databind
        force 'com.fasterxml.jackson.core:jackson-databind:' + jacksonVersion
        force 'com.fasterxml.jackson.core:jackson-core:' + jacksonVersion
        force 'com.fasterxml.jackson.core:jackson-annotations:' + jacksonVersion
        force 'org.codehaus.jackson:jackson-mapper-asl:' + jacksonMapperVersion
        // required for Spring 4:
        force 'org.aspectj:aspectjrt:' + aspectjVersion
        force 'org.aspectj:aspectjweaver:' + aspectjVersion

        // see comment on mongoDBDriverVersion
        force 'org.mongodb:mongo-java-driver:' + mongoDBDriverVersion
    }
}
