package org.t2k.cgs.domain.model.tocItem;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.apache.log4j.Logger;
import org.t2k.cgs.domain.model.classification.TaggedStandards;
import org.t2k.cgs.domain.model.ebooks.Page;

import javax.validation.Valid;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * @author Alex Burdusel on 2016-06-16.
 */
public class LessonPage {

    private static final Logger LOGGER = Logger.getLogger(LessonPage.class);

    private String cid;
    @JsonProperty
    private String eBookId;
    private String pageId;
    private String href;
    private String thumbnailHref;
    private String title;
    private List<Object> comments; // TODO: 1/11/17
    private String type = "page";
    /**
     * mongo stores N\A String value where no index available (probably received from UI), Integer otherwise
     */
    private Object originalIndex;
    private List<String> resourceRefId = new ArrayList<>();
    @Valid
    private List<TaggedStandards> standards = new ArrayList<>();
    /**
     * DL task object
     */
    private List<Object> overlayElements = new ArrayList<>();
    private Object teacherGuide;

    /**
     * generated by UI on blank page
     */
    private Object virtualData;

    public static LessonPage newInstance(Page page) {
        LessonPage lessonPage = new LessonPage();
        lessonPage.cid = UUID.randomUUID().toString();
        lessonPage.eBookId = page.getEBookId();
        lessonPage.pageId = page.getId();
        lessonPage.href = page.getHref();
        lessonPage.thumbnailHref = page.getThumbnailHref();
        lessonPage.title = page.getTitle();
        lessonPage.originalIndex = page.getOriginalIndex();
        return lessonPage;
    }

    /**
     * Factory method for creating a new {@link LessonPage} out of a new {@link Page} object, by keeping the user created overlay
     * elements on the existing {@link LessonPage}. This method is intended for updating the eBook content on the {@link LessonPage}
     * <p>
     * NOTE: The two pages must have the same pageID from the eBook tok, otherwise {@link IllegalArgumentException}
     * will be thrown.
     * </p>
     *
     * @param existingLessonPage the existing lesson page, from which the user created object will be kept
     * @param newPage            a new/updated eBook page to be used on the lesson
     */
    public static LessonPage newInstance(LessonPage existingLessonPage, Page newPage) {

        if (!existingLessonPage.getPageId().equals(newPage.getId())) {
            throw new IllegalArgumentException(
                    String.format("The pageId of the existing lesson (%s) page and the new page (%s), used to update it, do not match",
                            existingLessonPage, newPage));
        }
        LessonPage lessonPage = new LessonPage();
        lessonPage.cid = UUID.randomUUID().toString();
        lessonPage.eBookId = newPage.getEBookId();
        lessonPage.pageId = newPage.getId();
        lessonPage.href = newPage.getHref();
        lessonPage.thumbnailHref = newPage.getThumbnailHref();
        lessonPage.originalIndex = newPage.getOriginalIndex();
        lessonPage.title = existingLessonPage.title;
        lessonPage.comments = existingLessonPage.comments;
        lessonPage.resourceRefId = existingLessonPage.resourceRefId;
        lessonPage.standards = existingLessonPage.standards;
        lessonPage.overlayElements = existingLessonPage.overlayElements;
        lessonPage.virtualData = existingLessonPage.virtualData;
        return lessonPage;
    }

    public String getCid() {
        return cid;
    }

    @JsonIgnore
    public String getEBookId() {
        return eBookId;
    }

    public String getPageId() {
        return pageId;
    }

    public String getHref() {
        return href;
    }

    public String getThumbnailHref() {
        return thumbnailHref;
    }

    public String getTitle() {
        return title;
    }

    public List<Object> getComments() {
        return comments;
    }

    public String getType() {
        return type;
    }

    /**
     * mongo stores N\A String value where no index available (probably received from UI), Integer otherwise
     */
    public Object getOriginalIndex() {
        return originalIndex;
    }

    public List<String> getResourceRefId() {
        return resourceRefId;
    }

    public List<TaggedStandards> getStandards() {
        return standards;
    }

    /**
     * DL task object
     */
    public List<Object> getOverlayElements() {
        return overlayElements;
    }

    /**
     * generated by UI on blank page
     */
    public Object getVirtualData() {
        return virtualData;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        LessonPage other = (LessonPage) obj;
        return this.cid.equals(other.cid);
    }

    @Override
    public int hashCode() {
        int result = 17;
        result = 31 * result + cid.hashCode();
        return result;
    }

    @Override
    public String toString() {
        return "LessonPage{" +
                "\"cid\": \"" + cid + '\"' +
                ", \"eBookId\": \"" + eBookId + '\"' +
                ", \"pageId\": \"" + pageId + '\"' +
                ", \"href\": \"" + href + '\"' +
                ", \"thumbnailHref\": \"" + thumbnailHref + '\"' +
                ", \"title\": \"" + title + '\"' +
                ", \"type\": \"" + type + '\"' +
                ", \"originalIndex\": \"" + originalIndex + '\"' +
                ", \"resourceRefId\": \"" + resourceRefId + '\"' +
                ", \"standards\": " + standards +
                ", \"overlayElements\": " + overlayElements +
                "}";
    }

    public Object getTeacherGuide() {
        return teacherGuide;
    }
}
